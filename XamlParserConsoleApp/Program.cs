using System.Text;
using xaml_parser;
using xaml_parser.Structures;

namespace XamlParserConsoleApp;

/// <summary>
/// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ XAML Parser.
/// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ XAML –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö.
/// </summary>
internal static class Program
{
    #region Sample XAML Content

    /// <summary>
    /// –ü—Ä–∏–º–µ—Ä XAML –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –ø–∞—Ä—Å–µ—Ä–∞.
    /// </summary>
    private const string SampleXaml = @"<?xml version=""1.0"" encoding=""UTF-8""?>
<Window xmlns=""http://schemas.microsoft.com/winfx/2006/xaml/presentation""
        xmlns:x=""http://schemas.microsoft.com/winfx/2006/xaml""
        Title=""Sample Window"" Width=""800"" Height=""600"">
    <Grid Name=""MainGrid"">
        <Grid.RowDefinitions>
            <RowDefinition Height=""Auto""/>
            <RowDefinition Height=""*""/>
            <RowDefinition Height=""Auto""/>
        </Grid.RowDefinitions>
        
        <TextBlock Grid.Row=""0"" x:Name=""HeaderText"" 
                   Text=""XAML Parser Demo"" 
                   FontSize=""20"" 
                   HorizontalAlignment=""Center""
                   Margin=""10""/>
        
        <StackPanel Grid.Row=""1"" Orientation=""Vertical"" Margin=""20"">
            <Button x:Name=""SaveButton"" Content=""Save"" Width=""100"" Margin=""5""/>
            <Button x:Name=""LoadButton"" Content=""Load"" Width=""100"" Margin=""5""/>
            <Button x:Name=""ExitButton"" Content=""Exit"" Width=""100"" Margin=""5""/>
            
            <TextBox x:Name=""InputTextBox"" 
                     Text=""Enter some text..."" 
                     Width=""200"" 
                     Height=""30"" 
                     Margin=""5""/>
        </StackPanel>
        
        <StatusBar Grid.Row=""2"">
            <StatusBarItem>
                <TextBlock x:Name=""StatusText"" Text=""Ready""/>
            </StatusBarItem>
        </StatusBar>
    </Grid>
</Window>";

    #endregion

    #region Main Method

    /// <summary>
    /// –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
    /// </summary>
    /// <param name="args">–ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.</param>
    public static async Task Main(string[] args)
    {
        try
        {
            Console.WriteLine("=== XAML Parser Console Demo ===\n");

            // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏
            await DemonstrateStringParsing();
            
            Console.WriteLine("\n" + new string('=', 50) + "\n");
            
            // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏)
            if (args.Length > 0)
            {
                await DemonstrateFileParsing(args[0]);
            }
            else
            {
                Console.WriteLine("–î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–¥–∞–π—Ç–µ –ø—É—Ç—å –∫ XAML —Ñ–∞–π–ª—É –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞.");
                Console.WriteLine("–ü—Ä–∏–º–µ—Ä: XamlParserConsoleApp.exe \"path/to/your/file.xaml\"");
            }
            
            Console.WriteLine("\n" + new string('=', 50));
            Console.WriteLine("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤—ã—Ö–æ–¥–∞...");
            Console.ReadKey();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {ex.Message}");
            Console.WriteLine($"–î–µ—Ç–∞–ª–∏: {ex}");
            Console.WriteLine("\n–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤—ã—Ö–æ–¥–∞...");
            Console.ReadKey();
        }
    }

    #endregion

    #region Demonstration Methods

    /// <summary>
    /// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ XAML –∏–∑ —Å—Ç—Ä–æ–∫–∏ –∏ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
    /// </summary>
    private static async Task DemonstrateStringParsing()
    {
        Console.WriteLine("1. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏");
        Console.WriteLine(new string('-', 40));

        // –ü–∞—Ä—Å–∏–Ω–≥ –∏–∑ —Å—Ç—Ä–æ–∫–∏
        using var parser = new XamlParser();
        var document = parser.ParseDocument(SampleXaml);

        if (document == null)
        {
            Console.WriteLine("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å XAML –¥–æ–∫—É–º–µ–Ω—Ç.");
            return;
        }

        Console.WriteLine("‚úÖ XAML –¥–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω!");
        Console.WriteLine($"   –ö–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç: {document.RootElement}");

        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        await DemonstrateElementSearch(document);

        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ä–µ–≤–∞
        DemonstrateTreeTraversal(document);
    }

    /// <summary>
    /// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ XAML —Ñ–∞–π–ª–∞.
    /// </summary>
    /// <param name="filePath">–ü—É—Ç—å –∫ XAML —Ñ–∞–π–ª—É.</param>
    private static async Task DemonstrateFileParsing(string filePath)
    {
        Console.WriteLine("2. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞");
        Console.WriteLine(new string('-', 40));
        Console.WriteLine($"–§–∞–π–ª: {filePath}");

        if (!File.Exists(filePath))
        {
            Console.WriteLine($"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filePath}");
            return;
        }

        try
        {
            using var fileParser = new XamlFileParser();
            
            // –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
            Console.WriteLine("üìÑ –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞...");
            var document = fileParser.ParseFile(filePath);
            
            if (document != null)
            {
                Console.WriteLine("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω!");
                Console.WriteLine($"   –ö–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç: {document.RootElement}");
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                var elementCount = CountElements(document.RootElement);
                Console.WriteLine($"   –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {elementCount}");
            }
            else
            {
                Console.WriteLine("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ñ–∞–π–ª.");
                return;
            }

            // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
            Console.WriteLine("\nüìÑ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≥–æ –∂–µ —Ñ–∞–π–ª–∞...");
            var asyncDocument = await fileParser.ParseFileAsync(filePath);
            
            if (asyncDocument != null)
            {
                Console.WriteLine("‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ñ–∞–π–ª–∞: {ex.Message}");
        }
    }

    /// <summary>
    /// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ.
    /// </summary>
    /// <param name="document">XAML –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞.</param>
    private static async Task DemonstrateElementSearch(XamlDocument document)
    {
        Console.WriteLine("\nüîç –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:");

        // –ü–æ–∏—Å–∫ –ø–æ ID
        Console.WriteLine("\n   –ü–æ–∏—Å–∫ –ø–æ ID:");
        var saveButton = document.FindElementById("SaveButton");
        if (saveButton != null)
        {
            Console.WriteLine($"   ‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —Å ID 'SaveButton': {saveButton}");
            Console.WriteLine($"      Content: {saveButton.GetAttribute("Content")}");
            Console.WriteLine($"      Width: {saveButton.GetAttribute("Width")}");
        }

        var headerText = document.FindElementById("HeaderText");
        if (headerText != null)
        {
            Console.WriteLine($"   ‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —Å ID 'HeaderText': {headerText}");
            Console.WriteLine($"      Text: {headerText.GetAttribute("Text")}");
            Console.WriteLine($"      FontSize: {headerText.GetAttribute("FontSize")}");
        }

        // –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ —Ç–µ–≥–∞
        Console.WriteLine("\n   –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ —ç–ª–µ–º–µ–Ω—Ç–∞:");
        var buttons = document.FindElementsByName("Button").ToList();
        Console.WriteLine($"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–æ–∫: {buttons.Count}");
        foreach (var button in buttons)
        {
            var content = button.GetAttribute("Content") ?? "–ë–µ–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ";
            var id = button.GetAttribute("x:Name") ?? button.GetAttribute("Name") ?? "–ë–µ–∑ ID";
            Console.WriteLine($"      - {content} (ID: {id})");
        }

        // –ü–æ–∏—Å–∫ –ø–æ –∞—Ç—Ä–∏–±—É—Ç—É
        Console.WriteLine("\n   –ü–æ–∏—Å–∫ –ø–æ –∞—Ç—Ä–∏–±—É—Ç—É 'Margin':");
        var elementsWithMargin = document.FindElementsByAttribute("Margin").ToList();
        Console.WriteLine($"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º 'Margin': {elementsWithMargin.Count}");
        foreach (var element in elementsWithMargin.Take(3)) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
        {
            Console.WriteLine($"      - {element.Name}: Margin='{element.GetAttribute("Margin")}'");
        }

        // –ü–æ–∏—Å–∫ —Å –ø–æ–º–æ—â—å—é –ø—Ä–µ–¥–∏–∫–∞—Ç–∞
        Console.WriteLine("\n   –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —à–∏—Ä–∏–Ω–æ–π –±–æ–ª—å—à–µ 150:");
        var wideElements = document.FindElements(e => 
        {
            var widthStr = e.GetAttribute("Width");
            if (double.TryParse(widthStr, out var width))
                return width > 150;
            return false;
        }).ToList();
        
        Console.WriteLine($"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —à–∏—Ä–æ–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {wideElements.Count}");
        foreach (var element in wideElements)
        {
            Console.WriteLine($"      - {element.Name}: Width={element.GetAttribute("Width")}");
        }
    }

    /// <summary>
    /// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ö–æ–¥ –¥–µ—Ä–µ–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ –≤—ã–≤–æ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.
    /// </summary>
    /// <param name="document">XAML –¥–æ–∫—É–º–µ–Ω—Ç.</param>
    private static void DemonstrateTreeTraversal(XamlDocument document)
    {
        Console.WriteLine("\nüå≥ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞:");
        PrintElementTree(document.RootElement, 0);
    }

    #endregion

    #region Helper Methods

    /// <summary>
    /// –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–≤–æ–¥–∏—Ç –¥–µ—Ä–µ–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å.
    /// </summary>
    /// <param name="element">–≠–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞.</param>
    /// <param name="indent">–£—Ä–æ–≤–µ–Ω—å –æ—Ç—Å—Ç—É–ø–∞.</param>
    private static void PrintElementTree(XamlElement element, int indent)
    {
        var indentStr = new string(' ', indent * 2);
        var elementInfo = $"{element.Name}";
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± ID, –µ—Å–ª–∏ –µ—Å—Ç—å
        var id = element.GetAttribute("x:Name") ?? element.GetAttribute("Name");
        if (!string.IsNullOrEmpty(id))
            elementInfo += $" (ID: {id})";
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–µ–≤—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
        var keyAttributes = new[] { "Content", "Text", "Title" };
        foreach (var attr in keyAttributes)
        {
            var value = element.GetAttribute(attr);
            if (!string.IsNullOrEmpty(value))
            {
                elementInfo += $" [{attr}: \"{value}\"]";
                break; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π
            }
        }

        Console.WriteLine($"{indentStr}üìÑ {elementInfo}");

        // –í—ã–≤–æ–¥–∏–º –≤–∞–∂–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
        var importantAttrs = element.Attributes
            .Where(kvp => new[] { "Width", "Height", "Margin", "Grid.Row", "Grid.Column" }
                .Contains(kvp.Key))
            .Take(3)
            .ToList();
            
        foreach (var attr in importantAttrs)
        {
            Console.WriteLine($"{indentStr}   @{attr.Key} = \"{attr.Value}\"");
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        if (!string.IsNullOrEmpty(element.TextContent?.Trim()))
        {
            var text = element.TextContent.Trim();
            if (text.Length > 50)
                text = text.Substring(0, 47) + "...";
            Console.WriteLine($"{indentStr}   üìù \"{text}\"");
        }

        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏–º –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        foreach (var child in element.Children)
        {
            PrintElementTree(child, indent + 1);
        }
    }

    /// <summary>
    /// –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –¥–µ—Ä–µ–≤–µ.
    /// </summary>
    /// <param name="element">–ö–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞.</param>
    /// <returns>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤.</returns>
    private static int CountElements(XamlElement element)
    {
        return 1 + element.Children.Sum(CountElements);
    }

    #endregion
}