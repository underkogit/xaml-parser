-- build-rs.lua
print_success("ü¶Ä –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ xaml-parser-native")

-- –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ (–≥–¥–µ –ª–µ–∂–∏—Ç lua —Å–∫—Ä–∏–ø—Ç)
local base_dir = get_full_path(lua_script_path):match("(.+[/\\])[^/\\]*$")
local rust_project_dir = base_dir .. "xaml-parser-native"
local build_output_dir = base_dir .. "XamlParserConsoleApp\\bin\\Debug\\net9.0"

print_success("üìÅ –ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: " .. base_dir)
print_success("üìÅ Rust –ø—Ä–æ–µ–∫—Ç: " .. rust_project_dir)
print_success("üìÅ –í—ã—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: " .. build_output_dir)

-- –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø–∞–ø–∫—É —Å Rust –ø—Ä–æ–µ–∫—Ç–æ–º
if not set_cwd(rust_project_dir) then
    print_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ –ø–∞–ø–∫—É: " .. rust_project_dir)
    return
end

-- –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Cargo.toml
if not file_exists("Cargo.toml") then
    print_error("Cargo.toml –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ " .. rust_project_dir)
    return
end

-- –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–±–æ—Ä–∫—É
print_success("üßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–±–æ—Ä–∫–∏...")
if dir_exists("target") then
    delete_dir("target")
    println("–û—á–∏—â–µ–Ω–∞ –ø–∞–ø–∫–∞ target")
end

-- –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É
print_success("üî® –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∫–∏ –≤ release —Ä–µ–∂–∏–º–µ...")
local timer = create_timer()
timer:start()

local success = task_run("cargo build --release", function(line)
    if contains(line, "Compiling") then
        print_success("üì¶ " .. line)
    elseif contains(line, "Finished") then
        print_success("‚úÖ " .. line)
    elseif contains(line, "error") or contains(line, "ERROR") then
        print_error("‚ùå " .. line)
    elseif contains(line, "warning") or contains(line, "WARN") then
        println("‚ö†Ô∏è " .. line)
    else
        println(line)
    end
end)

local elapsed = timer:stop()

if success then
    print_success(string.format("üéâ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ %.2f —Å–µ–∫—É–Ω–¥!", elapsed))
    
    -- –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –ø–∞–ø–∫—É Build
    if not dir_exists(build_output_dir) then
        create_dir(build_output_dir)
        print_success("üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: " .. build_output_dir)
    end
    
    -- –ö–æ–ø–∏—Ä—É–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —Å–±–æ—Ä–∫–∏
    local target_release = "target/release"
    if dir_exists(target_release) then
        print_success("üì¶ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤...")
        
        -- –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ (–∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥ –≤–∞—à –ø—Ä–æ–µ–∫—Ç)
        local artifacts = {
            "xaml_parser_native.dll",
            "libxaml_parser_native.dll", 
            "xaml_parser_native.exe",
            "libxaml_parser_native.so",
            "libxaml_parser_native.dylib"
        }
        
        local copied_count = 0
        for _, artifact in ipairs(artifacts) do
            local source = target_release .. "/" .. artifact
            local dest = build_output_dir .. "/" .. artifact
            
            if file_exists(source) then
                copy_file(source, dest)
                print_success("üìÅ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: " .. artifact)
                copied_count = copied_count + 1
            end
        end
        
        if copied_count > 0 then
            print_success(string.format("üéâ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ %d –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –≤ Build/", copied_count))
        else
            println("‚ö†Ô∏è –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤")
        end
    else
        print_error("–ü–∞–ø–∫–∞ target/release –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    end
    
else
    print_error("üí• –°–±–æ—Ä–∫–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞!")
end
